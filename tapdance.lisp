    "use strict"
    (defvar *is-node*
     (and (not (eq (typeof process) 'undefined))
          (eq (typeof (@ process exit)) 'function)
          (eq (typeof (@ process next-tick)) 'function)))
    (defvar *start-time* ((@ *date now)))
    (defvar *stack* (array))
    (defvar *count* 0)
    (defvar *passing* 0)
    (setf (@ module exports) run-test)
    (println "TAP version 13")
    (if *is-node*
        (progn ((@ process on) 'exit exit)
               ((@ process next-tick) flush))
      (set-timeout flush 0))
    (defun run-test (fn)
      (defun assert (exp message)
        (incf *count*)
        (if exp
            (progn (incf *passing*)
                   (println (+ "ok " *count* " " message)))
          (println (+ "not ok " *count* " " message))))
      (defun comment (message) (println (+ "# " message)))
      ((@ *stack* push) (lambda () (fn assert comment))))
    (defun flush ()
      ((@ ((@ *stack* reduce)
       (lambda (chain fn) ((@ chain then) fn))
       ((@ *promise resolve))) then)
       (lambda () (if *is-node* ((@ process exit)) (exit)))
       (lambda (error) (show-error error))))
    (defun exit (code)
      (if *is-node*
          (setf (@ process exit-code)
                (if code code
                  (if (and *count* (eq *count* *passing*)) 0 1))))
      (if (not *count*) (println "not ok 1 no tests found"))
      (println (+ "1.." *count*))
      (println)
      (if (eq *count* *passing*)
          (println "# all tests passed")
        (let ((failing (- *count* *passing*)))
          (println
           (+ "# " failing " test" (if (> failing 1) "s" "") " failed"))))
      (println
       (+ "# test finished in " (- ((@ *date now)) *start-time*) " ms"))
      (println))
    (defun show-error (error)
      (println "  ---")
      (println (+ "  name: " (@ error name)))
      (println (+ "  message: " (@ error message)))
      (if (@ error stack)
          (progn
            (println "  stack:")
            ((@ ((@ error stack split) #\linefeed) for-each)
             (lambda (line)
               (setf line ((@ line trim)))
               (if (not (eq ((@ line index-of) (@ error name)) 0))
                   (println (+ "    - " line)))))))
      (println "  ..."))
    (defun println (str)
      ((@ console log)
       (if str ((@ str replace) #\linefeed "") "")))
